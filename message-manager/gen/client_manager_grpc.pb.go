// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package client_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientManagerClient is the client API for ClientManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientManagerClient interface {
	Healthz(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*CreateClientResponse, error)
	GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*GetClientResponse, error)
	GetPricePlan(ctx context.Context, in *GetPricePlanRequest, opts ...grpc.CallOption) (*GetPricePlanResponse, error)
	Debit(ctx context.Context, in *MoneyRequest, opts ...grpc.CallOption) (*MoneyResponse, error)
	Refund(ctx context.Context, in *MoneyRequest, opts ...grpc.CallOption) (*MoneyResponse, error)
}

type clientManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewClientManagerClient(cc grpc.ClientConnInterface) ClientManagerClient {
	return &clientManagerClient{cc}
}

func (c *clientManagerClient) Healthz(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/client_manager.v1.ClientManager/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagerClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*CreateClientResponse, error) {
	out := new(CreateClientResponse)
	err := c.cc.Invoke(ctx, "/client_manager.v1.ClientManager/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagerClient) GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*GetClientResponse, error) {
	out := new(GetClientResponse)
	err := c.cc.Invoke(ctx, "/client_manager.v1.ClientManager/GetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagerClient) GetPricePlan(ctx context.Context, in *GetPricePlanRequest, opts ...grpc.CallOption) (*GetPricePlanResponse, error) {
	out := new(GetPricePlanResponse)
	err := c.cc.Invoke(ctx, "/client_manager.v1.ClientManager/GetPricePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagerClient) Debit(ctx context.Context, in *MoneyRequest, opts ...grpc.CallOption) (*MoneyResponse, error) {
	out := new(MoneyResponse)
	err := c.cc.Invoke(ctx, "/client_manager.v1.ClientManager/Debit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagerClient) Refund(ctx context.Context, in *MoneyRequest, opts ...grpc.CallOption) (*MoneyResponse, error) {
	out := new(MoneyResponse)
	err := c.cc.Invoke(ctx, "/client_manager.v1.ClientManager/Refund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientManagerServer is the server API for ClientManager service.
// All implementations must embed UnimplementedClientManagerServer
// for forward compatibility
type ClientManagerServer interface {
	Healthz(context.Context, *Empty) (*Empty, error)
	CreateClient(context.Context, *CreateClientRequest) (*CreateClientResponse, error)
	GetClient(context.Context, *GetClientRequest) (*GetClientResponse, error)
	GetPricePlan(context.Context, *GetPricePlanRequest) (*GetPricePlanResponse, error)
	Debit(context.Context, *MoneyRequest) (*MoneyResponse, error)
	Refund(context.Context, *MoneyRequest) (*MoneyResponse, error)
	mustEmbedUnimplementedClientManagerServer()
}

// UnimplementedClientManagerServer must be embedded to have forward compatible implementations.
type UnimplementedClientManagerServer struct {
}

func (UnimplementedClientManagerServer) Healthz(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedClientManagerServer) CreateClient(context.Context, *CreateClientRequest) (*CreateClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedClientManagerServer) GetClient(context.Context, *GetClientRequest) (*GetClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (UnimplementedClientManagerServer) GetPricePlan(context.Context, *GetPricePlanRequest) (*GetPricePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPricePlan not implemented")
}
func (UnimplementedClientManagerServer) Debit(context.Context, *MoneyRequest) (*MoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debit not implemented")
}
func (UnimplementedClientManagerServer) Refund(context.Context, *MoneyRequest) (*MoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refund not implemented")
}
func (UnimplementedClientManagerServer) mustEmbedUnimplementedClientManagerServer() {}

// UnsafeClientManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientManagerServer will
// result in compilation errors.
type UnsafeClientManagerServer interface {
	mustEmbedUnimplementedClientManagerServer()
}

func RegisterClientManagerServer(s grpc.ServiceRegistrar, srv ClientManagerServer) {
	s.RegisterService(&ClientManager_ServiceDesc, srv)
}

func _ClientManager_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_manager.v1.ClientManager/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).Healthz(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManager_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_manager.v1.ClientManager/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManager_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_manager.v1.ClientManager/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).GetClient(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManager_GetPricePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPricePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).GetPricePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_manager.v1.ClientManager/GetPricePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).GetPricePlan(ctx, req.(*GetPricePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManager_Debit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).Debit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_manager.v1.ClientManager/Debit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).Debit(ctx, req.(*MoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManager_Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_manager.v1.ClientManager/Refund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).Refund(ctx, req.(*MoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientManager_ServiceDesc is the grpc.ServiceDesc for ClientManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client_manager.v1.ClientManager",
	HandlerType: (*ClientManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _ClientManager_Healthz_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _ClientManager_CreateClient_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _ClientManager_GetClient_Handler,
		},
		{
			MethodName: "GetPricePlan",
			Handler:    _ClientManager_GetPricePlan_Handler,
		},
		{
			MethodName: "Debit",
			Handler:    _ClientManager_Debit_Handler,
		},
		{
			MethodName: "Refund",
			Handler:    _ClientManager_Refund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_manager.proto",
}
